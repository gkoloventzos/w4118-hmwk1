3.10

The output of the first program will be
6 (child)
6 (father)

As the father will be waiting for the child to terminate, the child will
print the val (first 6) and then the father will continue and print also
the val (second 6).

3.9

As the father will produce 2 children, we will have 3 copies of the variable.
As the first child will enter the first if the value of its x will be 10. After
this if this child will terminate. Then the father will continue in the else
part and will fork another child. Then both 2nd children and father will add 10
in their x values. But only the father will succeed in the second if and add
another 5 to its x value. At the end we will have this result.
                        (Father)
                         x = 20
                           /\
                         /    \
                        /       \
                    1st Child  2nd child
                      x = 10    x = 15

3.8

The following program creates  processes.
main -> 5 -> 4 -> 3 -> 2 -> 1 -> 0
        |
        4 -> 3 -> 2 -> 1 -> 0
        


3.7

The output of this command will be the listing of the contents of the current
directory and it will close (if you do it in your machine you will probably 
not see anything as the shell will close immediately). Try it on a machine that
you are logged in through ssh. It will print the cnotents and the connection
will close. This happens as the exwc overwrites the current program (your open
shell for connection) with ls. It will print the contents and then it will end.
This will end also the connection with the pc.

3.4

Only if the child has already changed state, the wait call returns successfully
and immediately

3.3

This is a fork bomb. It will start creating processes until it cannot create
more (the limit of processes the user can create is reached). It will freeze
your computer and probably your cat will die.


