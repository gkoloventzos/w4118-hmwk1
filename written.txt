3.10

The output of the first program will be
6 (child)
6 (father)

As the father will be waiting for the child to terminate, the child will
print the val (first 6) and then the father will continue and print also
the val (second 6).

3.9

As the father will produce 2 children, we will have 3 copies of the variable.
As the first child will enter the first if the value of its x will be 10. After
this if this child will terminate. Then the father will continue in the else
part and will fork another child. Then both 2nd children and father will add 10
in their x values. But only the father will succeed in the second if and add
another 5 to its x value. At the end we will have this result.

                        (Father)
                         x = 20
                           /\
                         /    \
                        /       \
                    1st Child  2nd child
                      x = 10    x = 15

3.8

The following program creates 31 processes.
The problem starts when you are not realizing that every forkthem spawns only 
one new process.
With this in mind the 5 will create one process. Every 4 will create another.
Every 3 will create another, etc. So it goes as 2^0+2^1+2^2+2^3+2^4 = 31

3.7

The output of this command will be the listing of the contents of the current
directory and it will close (if you do it in your machine you will probably 
not see anything as the shell will close immediately). Try it on a machine that
you are logged in through ssh. It will print the contents and the connection
will close. This happens as the exec overwrites the current program (your open
shell for connection) with ls. It will print the contents and then it will end.
This will end also the connection with the pc.

3.4

Only if the child has already changed state, the wait call returns successfully
and immediately

3.3

This is a fork bomb. It will start creating processes until it cannot create
more (the limit of processes the user can create is reached). It will freeze
your computer and probably your cat will die.

3.2

Most of system calls are returning an error value. For exec a common error
should be that it could not find the program to execute. So yes exec can return
an error and it should. In general we are not looking if it returned -1 as if
it is still in that process an error has occurred and we just do perror.

3.1

Most of system calls are returning an error value. For fork an error that can
occur is to reach the limit of the users open processes. So fork it should
return an error and we must check if the fork returns -1 and handle the error.

1.8

My system will be designed as the system handles the system calls. I would give
him the resources it needs but my system will have the last line when the
resource was about to use. If something is not allowed then it would fail 
gracefully in order not to break the application of os.

1.13

In my point of view (I am using ubuntu 12.04) I would like to priorize in 
reliability, security, performance, adoption, portability. I want my system to
be reliable. Not to crash in the middle of answering this question and lose all
my unsaved data. And if this happens (and it happened as my pc froze when I
started the vmware...) to have a way to restore part of my answer (yeah .swp of
 vim). Then in security as it will be a shame to found out that my exersize was
download from the rest of the class. Also performance is a great aspect 
especially for gamers and serious art majors when using this complex program
for editing photos, videos or bluerpints. Adoption will come handy for creating
all of this great programs to use. Last but not least the portability. It is a
shame that especially with linux we have major problems with the graphics 
driver (Linus has said it all regarding a specific brand...).
